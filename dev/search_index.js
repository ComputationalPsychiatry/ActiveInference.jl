var documenterSearchIndex = {"docs":
[{"location":"","page":"Home Alt","title":"Home Alt","text":"CurrentModule = ActiveInference","category":"page"},{"location":"#ActiveInference","page":"Home Alt","title":"ActiveInference","text":"","category":"section"},{"location":"","page":"Home Alt","title":"Home Alt","text":"Documentation for ActiveInference.","category":"page"},{"location":"","page":"Home Alt","title":"Home Alt","text":"","category":"page"},{"location":"","page":"Home Alt","title":"Home Alt","text":"Modules = [ActiveInference, ActiveInference.Environments]","category":"page"},{"location":"#ActiveInference.action_select-Tuple{Any}","page":"Home Alt","title":"ActiveInference.action_select","text":"Selects action from computed actions probabilities â€“ used for stochastic action sampling \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.array_of_any_zeros-Tuple{Any}","page":"Home Alt","title":"ActiveInference.array_of_any_zeros","text":"Creates an array of \"Any\" with the desired number of sub-arrays filled with zeros\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.bayesian_model_average-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.bayesian_model_average","text":"Calculate Bayesian Model Average (BMA)\n\nCalculates the Bayesian Model Average (BMA) which is used for the State Action Prediction Error (SAPE). It is a weighted average of the expected states for all policies weighted by the posterior over policies. The qs_pi_all should be the collection of expected states given all policies. Can be retrieved with the get_expected_states function.\n\nqs_pi_all: Vector{Any} \n\nq_pi: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.calc_expected_utility-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.calc_expected_utility","text":"Calculate Expected Utility \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.calc_free_energy","page":"Home Alt","title":"ActiveInference.calc_free_energy","text":"Calculate Free Energy \n\n\n\n\n\n","category":"function"},{"location":"#ActiveInference.calc_pA_info_gain-Tuple{Any, Any, Any}","page":"Home Alt","title":"ActiveInference.calc_pA_info_gain","text":"Calculate observation to state info Gain \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.calc_pB_info_gain-NTuple{4, Any}","page":"Home Alt","title":"ActiveInference.calc_pB_info_gain","text":"Calculate state to state info Gain \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.calc_states_info_gain-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.calc_states_info_gain","text":"Calculate States Information Gain \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.calculate_SAPE-Tuple{ActiveInference.AIF}","page":"Home Alt","title":"ActiveInference.calculate_SAPE","text":"Calculate State-Action Prediction Error \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.calculate_bayesian_surprise-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.calculate_bayesian_surprise","text":"Calculate Bayesian Surprise \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.capped_log-Tuple{Array{Float64}}","page":"Home Alt","title":"ActiveInference.capped_log","text":"capped_log(array::Array{Float64})\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.capped_log-Tuple{Real}","page":"Home Alt","title":"ActiveInference.capped_log","text":"capped_log(x::Real)\n\nArguments\n\nx::Real: A real number.\n\nReturn the natural logarithm of x, capped at the machine epsilon value of x.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.capped_log-Tuple{Vector{Real}}","page":"Home Alt","title":"ActiveInference.capped_log","text":"capped_log(array::Vector{Real})\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.capped_log-Union{Tuple{Array{T}}, Tuple{T}} where T<:Real","page":"Home Alt","title":"ActiveInference.capped_log","text":"capped_log(array::Array{T}) where T <: Real\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.capped_log_array-Tuple{Any}","page":"Home Alt","title":"ActiveInference.capped_log_array","text":"Apply capped_log to array of arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.check_probability_distribution-Union{Tuple{Array{Vector{T}, 1}}, Tuple{T}} where T<:Real","page":"Home Alt","title":"ActiveInference.check_probability_distribution","text":"Check if the vector of vectors is a proper probability distribution.\n\nArguments\n\n(Array::Vector{Vector{T}}) where T<:Real\n\nThrows an error if the array is not a valid probability distribution:\n\nThe values must be non-negative.\nThe sum of the values must be approximately 1.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.check_probability_distribution-Union{Tuple{Vector{<:Array{T}}}, Tuple{T}} where T<:Real","page":"Home Alt","title":"ActiveInference.check_probability_distribution","text":"Check if the vector of arrays is a proper probability distribution.\n\nArguments\n\n(Array::Vector{<:Array{T}}) where T<:Real\n\nThrows an error if the array is not a valid probability distribution:\n\nThe values must be non-negative.\nThe sum of the values must be approximately 1.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.check_probability_distribution-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Home Alt","title":"ActiveInference.check_probability_distribution","text":"Check if the vector is a proper probability distribution.\n\nArguments\n\n(Vector::Vector{T}) where T<:Real : The vector to be checked.\n\nThrows an error if the array is not a valid probability distribution:\n\nThe values must be non-negative.\nThe sum of the values must be approximately 1.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.compute_accuracy-Tuple{Any, Array{Vector{T}, 1} where T<:Real}","page":"Home Alt","title":"ActiveInference.compute_accuracy","text":"Calculate Accuracy Term \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.compute_accuracy_new-Tuple{Any, Vector{Vector{Real}}}","page":"Home Alt","title":"ActiveInference.compute_accuracy_new","text":"Edited Compute Accuracy [Still needs to be nested within Fixed-Point Iteration] \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.construct_policies-Tuple{Vector{T} where T<:Real}","page":"Home Alt","title":"ActiveInference.construct_policies","text":"construct_policies(n_states::Vector{T} where T <: Real; n_controls::Union{Vector{T}, Nothing} where T <: Real=nothing, \n                   policy_length::Int=1, controllable_factors_indices::Union{Vector{Int}, Nothing}=nothing)\n\nConstruct policies based on the number of states, controls, policy length, and indices of controllable state factors.\n\nArguments\n\nn_states::Vector{T} where T <: Real: A vector containing the number of  states for each factor.\nn_controls::Union{Vector{T}, Nothing} where T <: Real=nothing: A vector specifying the number of allowable actions for each state factor. \npolicy_length::Int=1: The length of policies. (planning horizon)\ncontrollable_factors_indices::Union{Vector{Int}, Nothing}=nothing: A vector of indices identifying which state factors are controllable.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.create_matrix_templates","page":"Home Alt","title":"ActiveInference.create_matrix_templates","text":"create_matrix_templates(shapes::Vector{Int64}, template_type::String)\n\nCreates templates based on the specified shapes vector and template type. Templates can be uniform, random, or filled with zeros.\n\nArguments\n\nshapes::Vector{Int64}: A vector specifying the dimensions of each template to create.\ntemplate_type::String: The type of templates to create. Can be \"uniform\" (default), \"random\", or \"zeros\".\n\nReturns\n\nA vector of arrays, each corresponding to the shape given by the input vector.\n\n\n\n\n\n","category":"function"},{"location":"#ActiveInference.create_matrix_templates-Tuple{Vector{Int64}, Vector{Int64}, Vector{Int64}, Int64}","page":"Home Alt","title":"ActiveInference.create_matrix_templates","text":"create_matrix_templates(n_states::Vector{Int64}, n_observations::Vector{Int64}, n_controls::Vector{Int64}, policy_length::Int64, template_type::String = \"uniform\")\n\nCreates templates for the A, B, C, D, and E matrices based on the specified parameters.\n\nArguments\n\nn_states::Vector{Int64}: A vector specifying the dimensions and number of states.\nn_observations::Vector{Int64}: A vector specifying the dimensions and number of observations.\nn_controls::Vector{Int64}: A vector specifying the number of controls per factor.\npolicy_length::Int64: The length of the policy sequence. \ntemplate_type::String: The type of templates to create. Can be \"uniform\", \"random\", or \"zeros\". Defaults to \"uniform\".\n\nReturns\n\nA, B, C, D, E: The generative model as matrices and vectors.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.create_matrix_templates-Tuple{Vector{Int64}}","page":"Home Alt","title":"ActiveInference.create_matrix_templates","text":"create_matrix_templates(shapes::Vector{Int64})\n\nCreates uniform templates based on the specified shapes vector.\n\nArguments\n\nshapes::Vector{Int64}: A vector specifying the dimensions of each template to create.\n\nReturns\n\nA vector of normalized arrays.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.create_matrix_templates-Tuple{Vector{Vector{Int64}}, String}","page":"Home Alt","title":"ActiveInference.create_matrix_templates","text":"create_matrix_templates(shapes::Vector{Vector{Int64}}, template_type::String)\n\nCreates a multidimensional template based on the specified vector of shape vectors and template type. Templates can be uniform, random, or filled with zeros.\n\nArguments\n\nshapes::Vector{Vector{Int64}}: A vector of vectors, where each vector represent a dimension of the template to create.\ntemplate_type::String: The type of templates to create. Can be \"uniform\" (default), \"random\", or \"zeros\".\n\nReturns\n\nA vector of arrays, each having the multi-dimensional shape specified in the input vector.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.create_matrix_templates-Tuple{Vector{Vector{Int64}}}","page":"Home Alt","title":"ActiveInference.create_matrix_templates","text":"create_matrix_templates(shapes::Vector{Vector{Int64}})\n\nCreates a uniform, multidimensional template based on the specified shapes vector.\n\nArguments\n\nshapes::Vector{Vector{Int64}}: A vector of vectors, where each vector represent a dimension of the template to create.\n\nReturns\n\nA vector of normalized arrays (uniform distributions), each having the multi-dimensional shape specified in the input vector.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.dot_likelihood-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.dot_likelihood","text":"Dot-Product Function \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.fixed_point_iteration-Tuple{Array{Array{T, N}, 1} where {T<:Real, N}, Vector{Vector{Float64}}, Vector{Int64}, Vector{Int64}}","page":"Home Alt","title":"ActiveInference.fixed_point_iteration","text":"Run State Inference via Fixed-Point Iteration \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.get_expected_obs-Tuple{Any, Array{Array{T, N}, 1} where {T<:Real, N}}","page":"Home Alt","title":"ActiveInference.get_expected_obs","text":"Get Expected Observations \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.get_expected_states-Tuple{Array{Vector{T}, 1} where T<:Real, Any, Matrix{Int64}}","page":"Home Alt","title":"ActiveInference.get_expected_states","text":"Get Expected States \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.get_expected_states-Tuple{Vector{Vector{Real}}, Any, Vector{Matrix{Int64}}}","page":"Home Alt","title":"ActiveInference.get_expected_states","text":"Multiple dispatch for all expected states given all policies\n\nMultiple dispatch for getting expected states for all policies based on the agents currently inferred states and the transition matrices for each factor and action in the policy.\n\nqs::Vector{Vector{Real}} \n\nB: Vector{Array{<:Real}} \n\npolicy: Vector{Matrix{Int64}}\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.get_joint_likelihood-Tuple{Any, Any, Any}","page":"Home Alt","title":"ActiveInference.get_joint_likelihood","text":"Get Joint Likelihood \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.get_log_action_marginals-Tuple{Any}","page":"Home Alt","title":"ActiveInference.get_log_action_marginals","text":"Function to get log marginal probabilities of actions \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.get_model_dimensions","page":"Home Alt","title":"ActiveInference.get_model_dimensions","text":"Get Model Dimensions from either A or B Matrix \n\n\n\n\n\n","category":"function"},{"location":"#ActiveInference.infer_policies!-Tuple{ActiveInference.AIF}","page":"Home Alt","title":"ActiveInference.infer_policies!","text":"Update the agents's beliefs over policies \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.infer_states!-Tuple{ActiveInference.AIF, Vector{Int64}}","page":"Home Alt","title":"ActiveInference.infer_states!","text":"Update the agents's beliefs over states \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.init_aif-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.init_aif","text":"Initialize Active Inference Agent function initaif(         A,         B;         C=nothing,         D=nothing,         E = nothing,         pA = nothing,         pB = nothing,          pD = nothing,         parameters::Union{Nothing, Dict{String,Real}} = nothing,         settings::Union{Nothing, Dict} = nothing,         savehistory::Bool = true)\n\nArguments\n\n'A': Relationship between hidden states and observations.\n'B': Transition probabilities.\n'C = nothing': Prior preferences over observations.\n'D = nothing': Prior over initial hidden states.\n'E = nothing': Prior over policies. (habits)\n'pA = nothing':\n'pB = nothing':\n'pD = nothing':\n'parameters::Union{Nothing, Dict{String,Real}} = nothing':\n'settings::Union{Nothing, Dict} = nothing':\n'settings::Union{Nothing, Dict} = nothing':\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.kl_divergence-Tuple{Vector{Vector{Vector{Real}}}, Vector{Vector{Vector{Real}}}}","page":"Home Alt","title":"ActiveInference.kl_divergence","text":"kl_divergence(P::Vector{Vector{Vector{Float64}}}, Q::Vector{Vector{Vector{Float64}}})\n\nArguments\n\nP::Vector{Vector{Vector{Real}}}\nQ::Vector{Vector{Vector{Real}}}\n\nReturn the Kullback-Leibler (KL) divergence between two probability distributions.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.normalize_arrays-Tuple{Vector{<:Array{<:Real}}}","page":"Home Alt","title":"ActiveInference.normalize_arrays","text":"Normalizes multiple arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.normalize_arrays-Tuple{Vector{Any}}","page":"Home Alt","title":"ActiveInference.normalize_arrays","text":"Normalizes multiple arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.normalize_distribution-Tuple{Any}","page":"Home Alt","title":"ActiveInference.normalize_distribution","text":"Normalizes a Categorical probability distribution\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.onehot-Tuple{Int64, Int64}","page":"Home Alt","title":"ActiveInference.onehot","text":"Creates a onehot encoded vector \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.outer_product","page":"Home Alt","title":"ActiveInference.outer_product","text":"Multi-dimensional outer product \n\n\n\n\n\n","category":"function"},{"location":"#ActiveInference.process_observation-Tuple{Int64, Int64, Vector{Int64}}","page":"Home Alt","title":"ActiveInference.process_observation","text":"process_observation(observation::Int, n_modalities::Int, n_observations::Vector{Int})\n\nProcess a single modality observation. Returns a one-hot encoded vector. \n\nArguments\n\nobservation::Int: The index of the observed state with a single observation modality.\nn_modalities::Int: The number of observation modalities in the observation. \nn_observations::Vector{Int}: A vector containing the number of observations for each modality.\n\nReturns\n\nVector{Vector{Real}}: A vector containing a single one-hot encoded observation.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.process_observation-Tuple{Union{Tuple{Vararg{Int64}}, Array{Int64}}, Int64, Vector{Int64}}","page":"Home Alt","title":"ActiveInference.process_observation","text":"process_observation(observation::Union{Array{Int}, Tuple{Vararg{Int}}}, n_modalities::Int, n_observations::Vector{Int})\n\nProcess observation with multiple modalities and return them in a one-hot encoded format \n\nArguments\n\nobservation::Union{Array{Int}, Tuple{Vararg{Int}}}: A collection of indices of the observed states for each modality.\nn_modalities::Int: The number of observation modalities in the observation. \nn_observations::Vector{Int}: A vector containing the number of observations for each modality.\n\nReturns\n\nVector{Vector{Real}}: A vector containing one-hot encoded vectors for each modality.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.sample_action!-Tuple{ActiveInference.AIF}","page":"Home Alt","title":"ActiveInference.sample_action!","text":"Sample action from the beliefs over policies \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.sample_action-Tuple{Any, Vector{Matrix{Int64}}, Any}","page":"Home Alt","title":"ActiveInference.sample_action","text":"Sample Action [Stochastic or Deterministic] \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.select_highest-Union{Tuple{Vector{T}}, Tuple{T}} where T<:Real","page":"Home Alt","title":"ActiveInference.select_highest","text":"Selects the highest value from Array â€“ used for deterministic action sampling \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.softmax_array-Tuple{Any}","page":"Home Alt","title":"ActiveInference.softmax_array","text":"Softmax Function for array of arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.spm_wnorm-Tuple{Any}","page":"Home Alt","title":"ActiveInference.spm_wnorm","text":"SPM_wnorm \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_A!-Tuple{ActiveInference.AIF, Vector{Int64}}","page":"Home Alt","title":"ActiveInference.update_A!","text":"Update A-matrix \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_B!-Tuple{ActiveInference.AIF, Any}","page":"Home Alt","title":"ActiveInference.update_B!","text":"Update B-matrix \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_D!-Tuple{ActiveInference.AIF, Any}","page":"Home Alt","title":"ActiveInference.update_D!","text":"Update D-matrix \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_obs_likelihood_dirichlet-NTuple{4, Any}","page":"Home Alt","title":"ActiveInference.update_obs_likelihood_dirichlet","text":"Update obs likelihood matrix \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_posterior_policies","page":"Home Alt","title":"ActiveInference.update_posterior_policies","text":"Update Posterior over Policies \n\n\n\n\n\n","category":"function"},{"location":"#ActiveInference.update_posterior_states-Tuple{Array{Array{T, N}, 1} where {T<:Real, N}, Vector{Int64}}","page":"Home Alt","title":"ActiveInference.update_posterior_states","text":"Update Posterior States \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_state_likelihood_dirichlet-Tuple{Any, Any, Any, Array{Vector{T}, 1} where T<:Real, Any}","page":"Home Alt","title":"ActiveInference.update_state_likelihood_dirichlet","text":"Update state likelihood matrix \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.update_state_prior_dirichlet-Tuple{Any, Array{Vector{T}, 1} where T<:Real}","page":"Home Alt","title":"ActiveInference.update_state_prior_dirichlet","text":"Update prior D matrix \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.bayesian_model_average-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.Environments.bayesian_model_average","text":"Calculate Bayesian Model Average (BMA)\n\nCalculates the Bayesian Model Average (BMA) which is used for the State Action Prediction Error (SAPE). It is a weighted average of the expected states for all policies weighted by the posterior over policies. The qs_pi_all should be the collection of expected states given all policies. Can be retrieved with the get_expected_states function.\n\nqs_pi_all: Vector{Any} \n\nq_pi: Vector{Float64}\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.calculate_bayesian_surprise-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.Environments.calculate_bayesian_surprise","text":"Calculate Bayesian Surprise \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.capped_log-Tuple{Array{Float64}}","page":"Home Alt","title":"ActiveInference.Environments.capped_log","text":"capped_log(array::Array{Float64})\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.capped_log-Tuple{Real}","page":"Home Alt","title":"ActiveInference.Environments.capped_log","text":"capped_log(x::Real)\n\nArguments\n\nx::Real: A real number.\n\nReturn the natural logarithm of x, capped at the machine epsilon value of x.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.capped_log-Tuple{Vector{Real}}","page":"Home Alt","title":"ActiveInference.Environments.capped_log","text":"capped_log(array::Vector{Real})\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.capped_log-Union{Tuple{Array{T}}, Tuple{T}} where T<:Real","page":"Home Alt","title":"ActiveInference.Environments.capped_log","text":"capped_log(array::Array{T}) where T <: Real\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.capped_log_array-Tuple{Any}","page":"Home Alt","title":"ActiveInference.Environments.capped_log_array","text":"Apply capped_log to array of arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.dot_likelihood-Tuple{Any, Any}","page":"Home Alt","title":"ActiveInference.Environments.dot_likelihood","text":"Dot-Product Function \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.get_joint_likelihood-Tuple{Any, Any, Any}","page":"Home Alt","title":"ActiveInference.Environments.get_joint_likelihood","text":"Get Joint Likelihood \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.kl_divergence-Tuple{Vector{Vector{Vector{Real}}}, Vector{Vector{Vector{Real}}}}","page":"Home Alt","title":"ActiveInference.Environments.kl_divergence","text":"kl_divergence(P::Vector{Vector{Vector{Float64}}}, Q::Vector{Vector{Vector{Float64}}})\n\nArguments\n\nP::Vector{Vector{Vector{Real}}}\nQ::Vector{Vector{Vector{Real}}}\n\nReturn the Kullback-Leibler (KL) divergence between two probability distributions.\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.normalize_arrays-Tuple{Vector{<:Array{<:Real}}}","page":"Home Alt","title":"ActiveInference.Environments.normalize_arrays","text":"Normalizes multiple arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.normalize_arrays-Tuple{Vector{Any}}","page":"Home Alt","title":"ActiveInference.Environments.normalize_arrays","text":"Normalizes multiple arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.normalize_distribution-Tuple{Any}","page":"Home Alt","title":"ActiveInference.Environments.normalize_distribution","text":"Normalizes a Categorical probability distribution\n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.outer_product","page":"Home Alt","title":"ActiveInference.Environments.outer_product","text":"Multi-dimensional outer product \n\n\n\n\n\n","category":"function"},{"location":"#ActiveInference.Environments.softmax_array-Tuple{Any}","page":"Home Alt","title":"ActiveInference.Environments.softmax_array","text":"Softmax Function for array of arrays \n\n\n\n\n\n","category":"method"},{"location":"#ActiveInference.Environments.spm_wnorm-Tuple{Any}","page":"Home Alt","title":"ActiveInference.Environments.spm_wnorm","text":"SPM_wnorm \n\n\n\n\n\n","category":"method"}]
}
